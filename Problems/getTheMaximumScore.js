/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @return {number}
 */
var maxSum = function (nums1, nums2) {
  const refine = function (curr, other) {
    const refined = [];
    let tally = 0;

    curr.forEach((n) => {
      tally += n;
      if (other.includes(n)) {
        refined.push(tally);
        tally = 0;
      }
    });
    if (tally != 0) refined.push(tally);
    return refined;
  };

  const refined1 = refine(nums1, nums2);
  const refined2 = refine(nums2, nums1);

  const totals = [];

  const longerArr = refined1.length > refined2.length ? refined1 : refined2;

  for (let i = 0; i < longerArr.length; i++) {
    var e = refined1[i] ?? -1;
    var f = refined2[i] ?? -1;
    totals.push(e > f ? e : f);
  }

  return totals.reduce((n, acc) => (acc += n), 0);
};
// var maxSum = function (nums1, nums2) {
//   /**
//    * @type number[][]
//    */
//   const scores = [];

//   /**
//    * @param {number[]} curr
//    * @param {number[]} other
//    * @param {number} index
//    * @param {number[]} acc
//    */
//   const traverse = function (curr, other, index, acc) {
//     if (index >= curr.length) {
//       scores.push(acc);
//       return;
//     }

//     const num = curr[index];

//     if (index <= curr.length) {
//       traverse(curr, other, index + 1, [...acc, num]);
//     }

//     if (!acc.includes(num) && other.includes(num)) {
//       traverse(other, curr, other.indexOf(curr[index]) + 1, [...acc, num]);
//     }
//   };

//   traverse(nums1, nums2, 0, []);
//   traverse(nums2, nums1, 0, []);

//   scores.forEach((s) => console.log(s));

//   const compiledScores = scores
//     .map((arr) => arr.reduce((i, acc) => (acc += i), 0))
//     .sort((a, b) => b - a);

//   console.log("compiledScores", compiledScores);

//   return compiledScores[0];
// };

const params1 = {
  p1: [2, 4, 5, 8, 10],
  p2: [4, 6, 8, 9],
};

const params2 = {
  p1: [1, 3, 5, 7, 9],
  p2: [3, 5, 100],
};

const params3 = {
  p1: [1, 2, 3, 4, 5],
  p2: [6, 7, 8, 9, 10],
};

const params4 = {
  p1: [
    10, 27, 32, 44, 55, 68, 73, 83, 93, 104, 106, 122, 123, 139, 152, 156, 161,
    163, 177, 190, 206, 221, 234, 237, 253, 256, 270, 275, 279, 290, 295, 300,
    304, 318, 332, 334, 339, 356, 358, 376, 381, 385, 390, 406, 408, 411, 429,
    430, 431, 442, 458, 460, 480, 496, 501, 503, 508, 524, 528, 540, 543, 546,
    547, 562, 566, 569, 574, 588, 606, 623, 634, 645, 650, 668, 673, 689, 694,
    712, 727, 728, 739, 742, 762, 780, 782, 785, 787, 807, 812, 817, 833, 844,
    845, 865, 870, 871, 873, 878, 879, 896, 900, 912, 927, 929, 932, 935, 947,
    950, 952, 969, 987, 999, 1013, 1024, 1025, 1036, 1047, 1060, 1077, 1080,
    1096, 1108, 1111, 1116, 1117, 1120, 1133, 1153, 1154, 1172, 1175, 1189,
    1190, 1204, 1214, 1219, 1237, 1239, 1243, 1256, 1259, 1261, 1276, 1292,
    1306, 1320, 1330, 1332, 1333, 1336, 1337, 1356, 1370, 1385, 1400, 1404,
    1424, 1425, 1430, 1450, 1453, 1465, 1478, 1497, 1499, 1510, 1527, 1543,
    1545, 1548, 1559, 1575, 1578, 1598, 1610, 1624, 1635, 1653, 1670, 1672,
    1692, 1697, 1712, 1715, 1726, 1731, 1735, 1749, 1762, 1767,
  ],
  p2: [
    5, 6, 10, 11, 30, 47, 64, 69, 72, 74, 75, 87, 92, 97, 116, 131, 135, 150,
    151, 168, 172, 175, 177, 180, 183, 188, 201, 215, 234, 237, 256, 268, 272,
    275, 291, 296, 307, 309, 312, 329, 332, 335, 339, 356, 361, 363, 367, 371,
    375, 390, 391, 394, 411, 429, 439, 442, 452, 462, 463, 475, 477, 479, 480,
    482, 496, 500, 504, 507, 510, 530, 535, 537, 542, 547, 551, 562, 565, 569,
    580, 581, 583, 585, 602, 612, 626, 631, 634, 646, 648, 662, 675, 678, 697,
    702, 705, 707, 708, 711, 727, 729, 731, 742, 747, 763, 768, 771, 789, 799,
    809, 829, 847, 850, 855, 868, 870, 887, 897, 901, 914, 930, 941, 943, 945,
    949, 950, 965, 966, 968, 987, 990, 1002, 1017, 1019, 1037, 1052, 1056, 1059,
    1063, 1064, 1066, 1070, 1073, 1088, 1090, 1110, 1128, 1132, 1152, 1155,
    1159, 1175, 1189, 1201, 1219, 1235, 1236, 1239, 1257, 1260, 1274, 1278,
    1292, 1302, 1305, 1319, 1331, 1334, 1351, 1366, 1377, 1379, 1398, 1399,
    1413, 1417, 1429, 1432, 1433, 1436, 1447, 1451, 1468, 1487, 1488, 1501,
    1505, 1525, 1530, 1535, 1539, 1558, 1560, 1561, 1576, 1579, 1581, 1594,
    1599, 1603, 1616, 1628, 1633, 1644, 1647, 1660, 1661, 1666, 1669, 1688,
    1692, 1697, 1700, 1718, 1722, 1741, 1759, 1773, 1787, 1800, 1817, 1830,
    1833, 1837, 1850, 1860, 1861, 1878, 1894, 1904, 1909, 1913, 1926, 1946,
    1966, 1968, 1988, 1993, 2008, 2009, 2020, 2038, 2040, 2050, 2055, 2069,
    2072, 2076, 2096, 2098, 2103, 2113, 2118, 2135, 2136, 2138, 2155, 2160,
    2164, 2166, 2167, 2183, 2202, 2203, 2206, 2226, 2230, 2242, 2261, 2276,
    2289, 2305, 2310, 2314, 2316, 2318, 2321, 2340, 2353, 2358, 2363, 2367,
    2381, 2391, 2404, 2406, 2407, 2420, 2422, 2427, 2447, 2461, 2462, 2472,
    2476, 2478, 2482, 2502, 2505, 2506, 2510, 2525, 2539, 2541, 2555, 2568,
    2569, 2572, 2574, 2579, 2583, 2593, 2603, 2617, 2633, 2638, 2641, 2645,
    2655, 2675, 2693, 2697, 2715, 2735, 2753, 2768, 2772, 2787, 2807, 2817,
    2822, 2825, 2842,
  ],
};

const params5 = {
  p1: [5, 9, 11, 15, 17, 25, 29],
  p2: [6, 12, 15],
};

const params6 = {
  p1: [5, 9, 11, 15, 17, 25, 29],
  p2: [6, 12, 15],
};

console.log(maxSum(params1.p1, params1.p2));
console.log(maxSum(params2.p1, params2.p2));
console.log(maxSum(params3.p1, params3.p2));
console.log(maxSum(params4.p1, params4.p2));
console.log(maxSum(params5.p1, params5.p2));
